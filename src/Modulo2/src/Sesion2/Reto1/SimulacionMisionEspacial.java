package Sesion2.Reto1;

import java.util.concurrent.*;

// Sistema de navegaci√≥n
class SistemaNavegacion implements Callable<String> {
    public String call() throws Exception {
        Thread.sleep(1500);
        return "üõ∞Ô∏è Navegaci√≥n: trayectoria corregida con √©xito.";
    }
}

// Sistema de soporte vital
class SistemaSoporteVital implements Callable<String> {
    public String call() throws Exception {
        Thread.sleep(1000);
        return "üß™ Soporte vital: presi√≥n y ox√≠geno dentro de par√°metros normales.";
    }
}

// Sistema de control t√©rmico
class SistemaControlTermico implements Callable<String> {
    public String call() throws Exception {
        Thread.sleep(1200);
        return "üî• Control t√©rmico: temperatura estable (22¬∞C).";
    }
}

// Sistema de comunicaciones
class SistemaComunicaciones implements Callable<String> {
    public String call() throws Exception {
        Thread.sleep(800);
        return "üì° Comunicaciones: enlace con estaci√≥n terrestre establecido.";
    }
}

// Clase principal para simular la misi√≥n
public class SimulacionMisionEspacial {
    public static void main(String[] args) {
        System.out.println("üöÄ Simulaci√≥n de misi√≥n espacial iniciada...");

        // Crear un pool fijo de 4 hilos
        ExecutorService executor = Executors.newFixedThreadPool(4);

        try {
            // Enviar tareas
            Future<String> futuroNav = executor.submit(new SistemaNavegacion());
            Future<String> futuroVida = executor.submit(new SistemaSoporteVital());
            Future<String> futuroTermico = executor.submit(new SistemaControlTermico());
            Future<String> futuroCom = executor.submit(new SistemaComunicaciones());

            // Mostrar resultados (puede variar el orden de ejecuci√≥n real)
            System.out.println(futuroCom.get());
            System.out.println(futuroVida.get());
            System.out.println(futuroTermico.get());
            System.out.println(futuroNav.get());

            System.out.println("‚úÖ Todos los sistemas reportan estado operativo.");

        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        } finally {
            executor.shutdown(); // cerrar correctamente el executor
        }
    }
}

